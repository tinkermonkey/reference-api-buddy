name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Create test directories
      run: python -c "import os; os.makedirs('test_data', exist_ok=True); print('test_data directory created')"

    - name: Lint with flake8
      run: |
        flake8 reference_api_buddy tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 reference_api_buddy tests --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

    - name: Check code formatting with black
      run: |
        black --check reference_api_buddy tests

    - name: Check import sorting with isort
      run: |
        isort --check-only reference_api_buddy tests

    - name: Type check with mypy
      run: |
        mypy reference_api_buddy tests
      continue-on-error: true  # Allow type checking to fail for now

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=reference_api_buddy --cov-report=xml --cov-report=term-missing --timeout=300
      env:
        CI: true
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] pip-audit

    - name: Run security checks with bandit
      run: |
        bandit -r reference_api_buddy -f json -o bandit-report.json || echo "Bandit found security issues"
      continue-on-error: true

    - name: Check dependencies with pip-audit
      run: |
        pip-audit --format json --output pip-audit-report.json || echo "pip-audit found vulnerable dependencies"
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          pip-audit-report.json
        retention-days: 30
